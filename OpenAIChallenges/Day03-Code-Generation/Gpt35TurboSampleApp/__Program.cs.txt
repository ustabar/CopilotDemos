// See https://aka.ms/new-console-template for more information
// Note: The Azure OpenAI client library for .NET is in preview.
// Install the .NET library via NuGet: dotnet add package Azure.AI.OpenAI --version 1.0.0-beta.5

using Azure;
using Azure.AI.OpenAI;
using System.Text.Json;
using Microsoft.Extensions.Configuration;

var builder = new ConfigurationBuilder()
    .SetBasePath(Directory.GetCurrentDirectory())
    .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);

IConfigurationRoot configuration = builder.Build();

string? settingValue = configuration["MySetting"];
string? oaiEndpoint = configuration["AzureOAIEndpoint"];
string? oaiKey = configuration["AzureOAIKey"];
string? oaiDeploymentName = configuration["AzureOAIDeploymentName"];

string command;
bool promptForCommand = false;

do 
{
    Console.WriteLine("\n1: Add comments to my function\n" +
                        "2: Write unit tests for my function\n" +
                        "3: Fix my Go Fish game\n" +
                        "\"quit\" to exit the program\n\n" +
                        "Enter a number to select a task:");

    Console.WriteLine("\nEnter a prompt: ");
        string codeFile = "";
    command = Console.ReadLine() ?? "";

    switch (command)
    {
        case "1":
        case "2":
            codeFile = System.IO.File.ReadAllText($@"{AppDomain.CurrentDomain.BaseDirectory}sample-code\function\function.cs");
            Console.WriteLine("Commands:");
            Console.WriteLine("  help: Display a list of commands");
            Console.WriteLine("  exit: Exit the program");
            Console.WriteLine("  prompt: Prompt for a command");
            break;
        case "3":
            codeFile = System.IO.File.ReadAllText($@"{AppDomain.CurrentDomain.BaseDirectory}sample-code\go-fish\go-fish.cs");
            break;
        case "quit":
            Console.WriteLine("Exiting program...");
            break;
        default:
            Console.WriteLine("Invalid input. Please try again.");
            break;
    }
    userPrompt += codeFile;

} while (command != "quit");

OpenAIClient client = new OpenAIClient(
    new Uri(oaiEndpoint),
    new AzureKeyCredential(oaiKey));

string prompt = "What is the capital of the United States?";
string systemPrompt = "You are a helpful AI assistant that helps programmers write code.";

Response<ChatCompletions> response = await client.GetChatCompletionsAsync(
  oaiDeploymentName,
  new ChatCompletionsOptions()
  {
      Messages =
        {
            new ChatMessage(ChatRole.System, @"You are a helpful AI assistant that helps programmers write code.")
        },
      Temperature = (float)0.7,
      MaxTokens = 1000,
      NucleusSamplingFactor = (float)0.95,
      FrequencyPenalty = 0,
      PresencePenalty = 0
  });

ChatCompletions completions = response.Value;
string completionText = completions.Choices[0].Message.Content;
/*
var chatCompletionOptions = new ChatCompletionsOptions()
{
    Messages = new List<ChatRequestMessage>
    {
        new ChatRequestSystemMessage(systemPrompt),
        new ChatRequestUserMessage(userPrompt)
    },
    Temperature = 0.7f,
    MaxTokens = 800,
    NucleusSamplingFactor = 0.95f,
    FrequencyPenalty = 0.0f,
    PresencePenalty = 0.0f
};
*/
/*
Response<ChatCompletions> responseWithoutStream  = 
    await client.CreateCompletionsAsync(
        oaiDeploymentName,
        new chatcompletionsoptions()
        {
            Messages = {
                new ChatMessage(ChatRole.System, 
                    @"You are an AI assistant that helps people find information.")
            },
            Temperature = 0.7f,
            MaxTokens = 800,
            NucleusSamplingFactor = 0.95f,
            FrequencyPenalty = 0.0f,
            PresencePenalty = 0.0f
        });
*/
/*
ChatCompletions completions = responseWithoutStream.Value;

foreach (ChatCompletion completion in completions.ChatCompletions)
{
    Console.WriteLine(completion.Text);
}
*/

// Console.WriteLine(Directory.GetCurrentDirectory());
Console.WriteLine($"Hello, World! \n\n {settingValue}");
Console.ReadKey();